<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xbw的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-08T07:25:41.594Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xbw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6基础</title>
    <link href="http://yoursite.com/2020/06/08/es6/"/>
    <id>http://yoursite.com/2020/06/08/es6/</id>
    <published>2020-06-08T07:20:32.000Z</published>
    <updated>2020-06-08T07:25:41.594Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="-ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="-ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的MVVM</title>
    <link href="http://yoursite.com/2020/06/06/vue-mvvm/"/>
    <id>http://yoursite.com/2020/06/06/vue-mvvm/</id>
    <published>2020-06-06T08:25:58.000Z</published>
    <updated>2020-06-06T09:26:59.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h2><pre><code>MVVM拆开来即为Model-View-ViewModel，由View ViewModel Model三部分组成</code></pre><div style="text-align: center"><p><img src="/images/vue_mvvm.png" alt="Vue的数据驱动视图"></p></div><ul><li><strong>View层</strong><ul><li>视图层</li><li>前端开发中，通常为DOM</li><li>主要用与展示信息</li></ul></li><li><strong>Model层</strong><ul><li>数据层</li><li>可能是固定的数据，更多的是来自于网络请求</li></ul></li><li><strong>ViewModel层</strong><ul><li>视图模型层</li><li>是View和Model沟通的桥梁</li><li>一方面实现了数据绑定(<strong>Data Bindings</strong>),即将<strong>Model</strong>层数据的改变实时反应到<strong>View</strong>层中</li><li>另一方面实现了<strong>DOM</strong>监听(<strong>DOM Listener</strong>)，即监听<strong>DOM</strong>事件的发生，并改变对应的数据</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVVM的理解&quot;&gt;&lt;a href=&quot;#MVVM的理解&quot; class=&quot;headerlink&quot; title=&quot;MVVM的理解&quot;&gt;&lt;/a&gt;MVVM的理解&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MVVM拆开来即为Model-View-ViewModel，由View ViewMo
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Vue中的MVVM" scheme="http://yoursite.com/tags/Vue%E4%B8%AD%E7%9A%84MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="http://yoursite.com/2020/06/05/vue/"/>
    <id>http://yoursite.com/2020/06/05/vue/</id>
    <published>2020-06-05T12:20:02.000Z</published>
    <updated>2020-06-10T12:23:51.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue安装的三种方式"><a href="#Vue安装的三种方式" class="headerlink" title="Vue安装的三种方式"></a>Vue安装的三种方式</h2><ol><li><p><strong>CDN引入</strong></p><ul><li><strong>开发环境版本，包含了有帮助的命令行警告</strong><br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li><li><strong>生产环境版本，优化了尺寸和速度</strong><br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</code>  </li></ul></li><li><p><strong>官方下载引入</strong>  </p><ul><li>直接引入<code>&lt;script&gt;</code>标签</li></ul></li><li><p><strong>NPM安装</strong>  </p><ul><li><code>npm install vue</code></li></ul></li></ol><hr><h2 id="创建Vue实例传入的options"><a href="#创建Vue实例传入的options" class="headerlink" title="创建Vue实例传入的options"></a>创建Vue实例传入的options</h2><ul><li><strong>el</strong><ul><li>类型：string | HTMLElement</li><li>作用：决定之后Vue实例会管理哪一个DOM</li></ul></li><li><strong>data</strong><ul><li>类型：Object | Function</li><li>作用：Vue实例对应的数据对象</li></ul></li><li><strong>methods</strong><ul><li>类型：{ [key: string]: Function }</li><li>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用</li></ul></li></ul><hr><h2 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h2><ol><li><strong>Mustache语法</strong>  <pre><code>&lt;div id=&quot;app&quot;&gt;   &lt;h2&gt;{{hello}}&lt;/h2&gt;   &lt;h2&gt;{{hello + ' ' + world}}&lt;/h2&gt;   &lt;h2&gt;{{hello}} {{world}}&lt;/h2&gt;   &lt;h2&gt;{{count * 2}}&lt;/h2&gt;&lt;/div&gt;&lt;script&gt;   const app = new Vue({      el: &#39;#app&#39;,      data: {         hello: &#39;hello&#39;,         world: &#39;world&#39;,         count: 100      }   })&lt;/script&gt;</code></pre></li><li><strong>v-once指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>该指令表示元素和组件只渲染一次，不会随着数据的该笔而改变</li></ul></li><li><strong>v-html指令</strong><ul><li>该指令后面往往跟上一个string类型</li><li>会将string类型的html解析并渲染</li></ul></li><li><strong>v-text指令</strong><ul><li>该指令与<strong>Mustache</strong>语法比较相似，都是将数据显示在界面，但不够灵活</li><li>该指令接受一个string类型</li></ul></li><li><strong>v-pre指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>该指令跳过解析，显示原本的内容</li></ul></li><li><strong>v-cloak指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>斗篷</li></ul></li></ol><hr><h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><ul><li>该指令可以动态绑定属性<ol><li>使用方法  <pre><code>&lt;div id=&quot;app&quot;&gt;&lt;img v-bind:src=&quot;imgURL&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</code></pre></li><li>语法糖  <pre><code>&lt;div id=&quot;app&quot;&gt;&lt;img :src=&quot;imgURL&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</code></pre></li></ol></li><li>动态绑定class<ol><li>使用方法  <pre><code>&lt;style&gt;.active {  color: red;}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;&lt;h2 :class=&quot;active&quot;&gt;hello&lt;/h2&gt;&lt;h2 :class=&quot;{类名1:boolean,类名2:boolean}&quot;&gt;hello&lt;/h2&gt;&lt;h2 :class=&quot;{key(css属性名):value(css属性值)}&quot;&gt;hello&lt;/h2&gt;&lt;/div&gt;</code></pre></li></ol></li></ul><hr><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ol><li><p>使用方法 </p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;h2&gt;{{fullStr}}&lt;/h2&gt;&lt;/div&gt;const app = new Vue({  el: &#39;#app&#39;,  data: {    firstStr: &#39;hello&#39;,    lastStr: &#39;world&#39;  },  computed: {    fullStr() {     return this.firstStr + &#39; &#39; + this.lastStr;    }  }})</code></pre></li><li><p>setter和getter方法  </p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;h2&gt;{{fullStr}}&lt;/h2&gt;&lt;/div&gt;const app = new Vue({  el: &#39;#app&#39;,  data: {    firstStr: &#39;hello&#39;,    lastStr: &#39;world&#39;  },  computed: {    fullStr: function() {      set: function(value) { //大多数情况不写      const str = value.split(&#39; &#39;);      this.firstStr = str[0];      this.lastStr = str[1];      },      get: function() {        return this.firstStr + &#39; &#39; + this.lastStr;      }    }  }})</code></pre></li><li><p><strong>computed</strong>和<strong>methods</strong>的对比</p><ul><li>多次使用时<strong>computed</strong>比<strong>methods</strong>性能高</li><li><strong>Vue</strong>内部对<strong>computed</strong>做了缓存，多次使用只调用一次，只有内容发生改变时，才会重新调用、缓存；而<strong>methods</strong>是使用几次调用几次</li></ul></li></ol><hr><h2 id="v-on事件监听"><a href="#v-on事件监听" class="headerlink" title="v-on事件监听"></a>v-on事件监听</h2><ul><li>绑定事件监听器</li><li>使用  <pre><code>&lt;button v-on:click=&quot;&quot;&gt;&lt;/button&gt;</code></pre></li><li>语法糖  <pre><code>&lt;button @click=&quot;&quot;&gt;&lt;/button&gt;</code></pre></li><li>v-on参数<ol><li>若方法不需要额外参数，方法后的()可以不添加</li><li>写方法时省略了()，但方法本身是需要一个参数的Vue会默认将浏览器生产的event对象作为参数传入</li><li>方法定义时，需要event对象，也需要其他参数<pre><code>&lt;button @click=&quot;btnClick(param,$event)&quot;&gt;&lt;/button&gt;</code></pre></li></ol></li><li>v-on修饰符<ol><li>阻止冒泡<strong>stop</strong>    <pre><code> &lt;div @click=&quot;divClick&quot;&gt;   &lt;button @click.stop=&quot;btnClick&quot;&gt;按钮&lt;/button&gt; &lt;/div&gt;</code></pre></li><li>阻止默认行为<strong>prevent</strong>    <pre><code> &lt;form action=&quot;baidu&quot;&gt;   &lt;input type=&quot;submit&quot; value=&quot;提交&quot; @click.prevent=&quot;submitClick&quot;&gt; &lt;/form&gt;</code></pre></li><li>监听某个键盘键帽的点击(例如enter键)<pre><code> &lt;input type=&quot;text&quot; @keyup.enter=&quot;keyClick&quot;&gt;</code></pre></li><li>只触发一次回调<strong>once</strong><pre><code> &lt;button @click.once=&quot;buttonClick&quot;&gt;按钮&lt;/button&gt;</code></pre></li></ol></li></ul><hr><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li>v-if的使用(接收一个Boolean值)<pre><code>&lt;h2 v-if=&quot;true&quot;&gt;hello world&lt;/h2&gt;</code></pre></li><li>v-else的使用(v-if接收的是false是起作用)<pre><code>&lt;h2 v-if=&quot;isShow&quot;&gt;isShow为true时显示&lt;/h2&gt;  &lt;h2 v-else&gt;isShow为false时显示&lt;/h2&gt;</code></pre></li><li>v-else-if的使用(不建议)<pre><code>&lt;p v-if=&quot;score&gt;=90&quot;&gt;优秀&lt;/p&gt;&lt;p v-else-if=&quot;score&gt;=80&quot;&gt;良好&lt;/p&gt;&lt;p v-else-if=&quot;score&gt;=60&quot;&gt;合格&lt;/p&gt;&lt;p v-else&gt;不及格&lt;/p&gt;</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue安装的三种方式&quot;&gt;&lt;a href=&quot;#Vue安装的三种方式&quot; class=&quot;headerlink&quot; title=&quot;Vue安装的三种方式&quot;&gt;&lt;/a&gt;Vue安装的三种方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CDN引入&lt;/strong&gt;&lt;/p&gt;
&lt;u
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Vue基础" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="http://yoursite.com/2020/06/04/JavaScript/"/>
    <id>http://yoursite.com/2020/06/04/JavaScript/</id>
    <published>2020-06-04T12:25:02.000Z</published>
    <updated>2020-06-06T09:24:31.210Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="-JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="-JavaScript基础语法" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法笔记</title>
    <link href="http://yoursite.com/2020/06/04/algorithm_notes/"/>
    <id>http://yoursite.com/2020/06/04/algorithm_notes/</id>
    <published>2020-06-04T12:25:02.000Z</published>
    <updated>2020-06-06T09:24:44.191Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="-JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="-JavaScript算法" scheme="http://yoursite.com/tags/JavaScript%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
