<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xbw的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-22T10:53:27.420Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xbw</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue-CLI</title>
    <link href="http://yoursite.com/2020/06/18/Vue-CLI/"/>
    <id>http://yoursite.com/2020/06/18/Vue-CLI/</id>
    <published>2020-06-18T03:11:34.000Z</published>
    <updated>2020-06-22T10:53:27.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-CLI的使用"><a href="#Vue-CLI的使用" class="headerlink" title="Vue CLI的使用"></a>Vue CLI的使用</h2><ul><li>安装Vue脚手架<br><code>npm install -g @vue/cli</code></li><li>拉取 2.x 模板 (旧版本)<br><code>npm install -g @vue/cli-init</code></li><li>Vue CLI2初始化项目<br><code>vue init webpack my-project</code></li><li>runtime+compiler和runtime-only的区别在于main.js文件<ul><li>runtime+compiler中的main.js<pre><code>new Vue({  el: &#39;#app&#39;,  // components: { App },  // template: &#39;&lt;App/&gt;&#39;  // 普通用法  render: function(createElement) {    return createElement(&#39;标签&#39;,    {标签的属性},    [标签的内容],    createElement(&#39;标签&#39;,[标签内容]))  }  // 传入组件对象（就和runtime-only相同了）  render: functiong(createElement){    return createElement(&#39;组件名称&#39;)  }})</code></pre></li><li>runtime-only中的main.js<pre><code>new Vue({  el: &#39;#app&#39;,  render: h =&gt; h(App)})</code></pre></li><li>这里借用一篇博客来理解<br><a href="https://blog.csdn.net/Xidian2850/article/details/103793913" target="_blank">文殊师利法王子</a></li></ul></li></ul><hr><h2 id="Vue-CLI3"><a href="#Vue-CLI3" class="headerlink" title="Vue CLI3"></a>Vue CLI3</h2><ul><li>创建项目<br><code>vue create 项目名称</code></li><li>配置的三种方法<ul><li>通过启动服务器配置（GUI界面配置）<br><code>vue ui</code></li><li>通过修改隐藏配置文件<br>文件隐藏在node_modules/@vue/cli-service/webpack.config.js</li><li>在当前目录下创建vue.config.js文件配置  <ul><li>提交到本地仓库<br><code>git commit -m &quot;描述&quot;</code>  </li><li>文件中导出配置：  <pre><code>  module.exports = {  }</code></pre></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-CLI的使用&quot;&gt;&lt;a href=&quot;#Vue-CLI的使用&quot; class=&quot;headerlink&quot; title=&quot;Vue CLI的使用&quot;&gt;&lt;/a&gt;Vue CLI的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装Vue脚手架&lt;br&gt;&lt;code&gt;npm install -g
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Vue脚手架" scheme="http://yoursite.com/tags/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Webpack</title>
    <link href="http://yoursite.com/2020/06/16/Webpack/"/>
    <id>http://yoursite.com/2020/06/16/Webpack/</id>
    <published>2020-06-16T11:49:49.000Z</published>
    <updated>2020-06-18T02:43:20.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack（打包之后就没有用了）的安装"><a href="#Webpack（打包之后就没有用了）的安装" class="headerlink" title="Webpack（打包之后就没有用了）的安装"></a>Webpack（打包之后就没有用了）的安装</h2><ul><li>先安装node</li><li>查看node版本<br><code>node -v</code></li><li>全局安装Webpack<br><code>npm install webpack@版本号 -g</code></li><li>本地安装Webpack 和项目同步<br><code>npm install webpack@版本号 --save-dev</code>（–save-dev是开发时依赖，项目打包后不需要继续使用）</li><li>查看webpack版本<br><code>webpack --version</code></li></ul><hr><h2 id="Webpack文件夹解析"><a href="#Webpack文件夹解析" class="headerlink" title="Webpack文件夹解析"></a>Webpack文件夹解析</h2><ul><li><p><strong>dist</strong>文件夹：用于存放之后打包的文件</p></li><li><p><strong>src</strong>文件夹：用于存放源文件</p></li><li><p><strong>index.html</strong>：首页</p></li><li><p><strong>package.json</strong>：通过<code>npm init</code>生成的，<strong>npm</strong>包管理的文件</p></li><li><p><strong>webpack.config.js</strong>：配置文件（文件名不可随意修改）  </p><pre><code>  // npm init   npm install  // 导入node中的path模块  const path = require(&#39;path&#39;);  // 映射webpack &#39;入口文件&#39; &#39;出口文件&#39;  module.exports = {      entry: &#39;./src/index.js&#39;,      output: {          path: path.join(__dirname,&#39;dist&#39;),          filename: &#39;bundle.js&#39;      }  }</code></pre></li><li><p><strong>package.json</strong>：依赖文件  </p><pre><code>  {      &quot;name&quot;: &quot;meetwebpack&quot;,      &quot;version&quot;: &quot;1.0.0&quot;,      &quot;description&quot;: &quot;&quot;,      &quot;main&quot;: &quot;webpack.config.js&quot;,      &quot;scripts&quot;: {          &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,          // 用于 npm run build映射 相当于运行webpack命令 会优先去本地找webpack，然后再去全局找，只要在终端中运行webpack就是全局          &quot;build&quot;: &quot;webpack&quot;      },      &quot;author&quot;: &quot;&quot;,      &quot;license&quot;: &quot;ISC&quot;      // 开发时依赖（开发阶段使用）      &quot;devDependencies&quot;: {          &quot;webpack&quot;: &quot;^3.6.0&quot;      }      // 打包后使用的依赖      &quot;dependencies&quot;: {      }  }</code></pre></li></ul><hr><h2 id="Webpack扩充loader"><a href="#Webpack扩充loader" class="headerlink" title="Webpack扩充loader"></a>Webpack扩充loader</h2><ul><li>使用过程<ul><li>npm安装loader<br><code>npm install --save-dev css-loader</code><br><code>npm install style-loader --save-dev</code><br><code>npm install --save-dev less-loader less</code><br><code>npm install --save-dev url-loader</code><br><code>npm install --save-dev babel-loader@7 babel-core babel-preset-es2015</code></li><li>webpack.comfig.js中的modules关键字下配置，加入以下代码  <pre><code>entry: &#39;./src/index.js&#39;,    output: {    path: path.join(__dirname,&#39;dist&#39;),    filename: &#39;bundle.js&#39;,    // file-loader加载图片时配置图片路径    publicPath: &#39;dist/&#39;},module: {    rules: [        {            // 正则 .css结尾            test: /\.css$/,            // css-loader只负责加载            // style-loader负责将样式添加到dom中            // webpack读取多个loader时从右往左读            use: [ &#39;style-loader&#39;,&#39;css-loader&#39; ]        },        {            test: /\.less$/,            use: [{                loader: &quot;style-loader&quot; // creates style nodes from JS strings            }, {                loader: &quot;css-loader&quot; // translates CSS into CommonJS            }, {                loader: &quot;less-loader&quot; // compiles Less to CSS            }]        },        {            test: /\.(png|jpg|gif)$/,            use: [                {                    loader: &#39;url-loader&#39;,                    options: {                        // 加载的图片小于limit时，会将图片编译成base64字符串形式，大于limit要使用file-loader加载（这里要配置publicPath）                        limit: 8192,                        // 规范打包后的图片名字 img文件夹/原来的图片名.8位hash值.原有扩展名                        name: &#39;img/[name].[hash:8].[ext]&#39;                    }                }            ]        },        {            test: /\.js$/,            // 排除：当打包es6--&gt;es5转化时 只转化src文件夹内的内容            exclude: /(node_modules|bower_components)/,            use: {                loader: &#39;babel-loader&#39;,                options: {                    // presets: [&#39;@babel/preset-env&#39;]                    presets: [&#39;es2015&#39;]                }            }        }    ]}</code></pre></li></ul></li></ul><hr><h2 id="Webpack引入Vue"><a href="#Webpack引入Vue" class="headerlink" title="Webpack引入Vue"></a>Webpack引入Vue</h2><ul><li>npm下载Vue<br><code>npm install vue --save</code></li><li>打包编译时报<code>You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.</code>错误<ul><li>解释：<ul><li>runtime-only-&gt;代码中不可以有任何的template</li><li>runtime-compliler-&gt;代码中可以有template，因为有compliler可以编译template</li></ul></li><li>解决（配置webpack.config.js）:<pre><code>module.exports = {    entry: &#39;./src/index.js&#39;,    output: {        path: path.join(__dirname,&#39;dist&#39;),        filename: &#39;bundle.js&#39;,        publicPath: &#39;dist/&#39;    },    module: {    },    resolve: {        // 别名        alias: {        // 指定Vue版本 其中含有compliler        &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;        }    }}</code></pre></li></ul></li><li>SPA（simple page web application单页面应用：只有一个html）<ul><li>可以通过vue-router（前端路由跳转）</li></ul></li><li>new Vue中的el属性和template属性同时存在时 Vue内部会把template替换到el挂载的元素</li><li>安装vue-loader（加载Vue文件）和vue-template-compiler（编译Vue）<br><code>npm install vue-loader vue-template-compiler --save-dev</code></li><li>webpack.config.js中配置vue-loader  <pre><code>module: {  rules: [      {          test:/\.vue$/,          use: [ &#39;vue-loader&#39; ]      }  ]}</code></pre></li></ul><hr><h2 id="Webpack中的plugin"><a href="#Webpack中的plugin" class="headerlink" title="Webpack中的plugin"></a>Webpack中的plugin</h2><ul><li>plugin<ul><li>plugin是插件的意思，用于对某个现有的架构进行扩展</li><li>webpack中的插件就是对webpack现有功能的扩展（比如打包优化、文件压缩）</li></ul></li><li>loader和plugin的区别<ul><li>loader主要用于转换某些类型的模块，是一个转换器</li><li>plugin是插件，是对webpack本身的扩展，是一个扩展器</li></ul></li><li>plugin的使用<ul><li>通过npm安装plugin（webpack已内置的插件无需安装）</li><li>在webpack.config.js中的plugins中配置插件</li></ul></li><li>plugin类型<ul><li>BannerPlugin：webpack自带插件，为打包的文件添加版权声明  <pre><code>```const webpack = require(&#39;webpack&#39;)module.exports = {    plugins: [        new webpack.BannerPlugin(&#39;最终版权归...所有&#39;)    ]}```</code></pre></li><li>HtmlWebpackPlugin：打包html的插件<ul><li>注：发布项目时，dist文件夹中要有index.html</li><li>自动生成一个index.html文件（可以指定模板生成）</li><li>将打包的js文件，自动通过script标签插入到body中</li><li>安装HtmlWebpackPlugin<pre><code>  npm install html-webpack-plugin --save-dev</code></pre><ul><li>配置webpack.config.js中的plugins<pre><code>const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)plugins: [    // 需要注释掉出口文件中的publicPath    new HtmlWebpackPlugin({        // 指定打包时的模板        template: &#39;index.html&#39;    })]</code></pre></li></ul></li></ul></li><li>uglifyjs-webpack-plugin：压缩打包后的js文件<ul><li>安装<br>  <code>npm uglifyjs-webpack-plugin@1.1.1 --save-dev</code></li><li>配置<pre><code>  const uglifyJsWebpackPlugin = require(&#39;uglifyjs-webpack-plugin&#39;)  plugins: [      new uglifyJsWebpackPlugin()  ]</code></pre></li></ul></li></ul></li></ul><hr><h2 id="基于node-js（使用express）搭建本地服务器"><a href="#基于node-js（使用express）搭建本地服务器" class="headerlink" title="基于node.js（使用express）搭建本地服务器"></a>基于node.js（使用express）搭建本地服务器</h2><ul><li>安装模块<br><code>npm install webpack-dev-server@2.9.3 --save-dev</code></li><li>devserver是webpack中的一个选项，有以下属性<ul><li>contentBase：为哪个文件夹提供本地服务，默认是根文件夹，改为./dist</li><li>port：端口号</li><li>inline：页面实时刷新</li><li>historyApiFallback：在SPA模式中，依赖HTML5的history模式</li><li>配置webpack.config.js文件  <pre><code>```devServer: {    contentBase: &#39;./dist&#39;,    inline: true,    // 自动打开网页    open: true}```  </code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Webpack（打包之后就没有用了）的安装&quot;&gt;&lt;a href=&quot;#Webpack（打包之后就没有用了）的安装&quot; class=&quot;headerlink&quot; title=&quot;Webpack（打包之后就没有用了）的安装&quot;&gt;&lt;/a&gt;Webpack（打包之后就没有用了）的安装&lt;/
      
    
    </summary>
    
    
      <category term="-Webpack" scheme="http://yoursite.com/categories/Webpack/"/>
    
    
      <category term="-Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS面试题解</title>
    <link href="http://yoursite.com/2020/06/16/html-css-interview/"/>
    <id>http://yoursite.com/2020/06/16/html-css-interview/</id>
    <published>2020-06-15T23:48:13.000Z</published>
    <updated>2020-06-16T13:56:23.067Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下列哪些功能默认支持跨域？  </p><p> A. LocalStorage<br> B. Image<br> C. canvas<br> D. iframe </p><pre><code> 答案：B D 注解：     跨域：发起请求与指向资源域不相同（协议+域名+端口）     常见指向资源的部件有：&lt;a&gt;,&lt;form&gt;,&lt;script&gt;,&lt;img&gt;,&lt;iframe&gt;,&lt;link&gt;等标签以及Ajax请求     介绍两个概念：         1. localStorage：类似 sessionStorage，但其区别在于：存储在 localStorage 的数据可以长期保留；当页面被关闭时，存储在 sessionStorage 的数据会被清除。         2. 同源策略（same-origin policy）：是浏览器执行的一种安全措施，目的是为了保证用户信息的安全，防止恶意的网站窃取数据。     受到同源策略的影响，localStorage是无法进行跨域请求的，可以利用postMessage+ifarme来实行跨域通信     HTML 规范中图片有一个 crossOrigin 属性，结合合适的 CORS 响应头，就可以实现在canvas中使用跨域 &lt;img&gt; 元素的图像</code></pre></li><li><p>下列说法错误的是：</p><p>A. 在Blink和WebKit的浏览器中，某个元素具有3D或透视变换（perspective transform）的CSS属性，会让浏览器创建单独的图层。<br>B. 我们平常会使用left和top属性来修改元素的位置，但left和top会触发重布局，取而代之的更好方法是使用translate，这个不会触发重布局。<br>C. 移动端要想动画性能流畅，应该使用3D硬件加速，因此最好给页面中的元素尽量添加translate3d或者translateZ(0)来触发3D硬件加速。<br>D. 解决浏览器渲染的性能问题时，首要目标就是要避免层的重绘和重排。 </p><pre><code>答案：C注解：   滥用硬件加速会导致严重性能问题，因为它增加了内存使用，并且它会导致移动端电池寿命减少</code></pre></li><li><p>下面有关CSS中link和@import的区别，描述错误的是</p><p>A. link属于XHTML标签，而@import完全是CSS提供的一种方式<br>B. 当一个页面被加载的时候，link引用的CSS会同时被加载，而@import引用的CSS会等到页面全部被下载完再被加载<br>C. link在支持CSS的浏览器上都支持而@import只在5.0以上的版本有效<br>D. 当使用javascript控制dom去改变样式的时候，只能使用@import方式</p><pre><code>答案：D注解：     关于link与@import的区别:         区别1：link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。         区别2：link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。         区别3：link是XHTML标签，无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。         区别4：link支持使用Javascript控制DOM去改变样式；而@import不支持。</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下列哪些功能默认支持跨域？  &lt;/p&gt;
&lt;p&gt; A. LocalStorage&lt;br&gt; B. Image&lt;br&gt; C. canvas&lt;br&gt; D. iframe &lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 答案：B D
 注解：
     跨域：发起请求与指向资源域
      
    
    </summary>
    
    
      <category term="-面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="-html/css面试" scheme="http://yoursite.com/tags/html-css%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件化</title>
    <link href="http://yoursite.com/2020/06/12/vue-module/"/>
    <id>http://yoursite.com/2020/06/12/vue-module/</id>
    <published>2020-06-12T09:26:41.000Z</published>
    <updated>2020-06-15T14:16:39.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h2><div style="text-align: center"><p><img src="/images/module.png" alt="Vue组件树"></p></div>  <ul><li><p>Vue提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</p></li><li><p>任何应用都会被抽象成一棵组件树</p></li><li><p>组件使用</p><ul><li>创建组件构造器<br><code>const cpnC = Vue.extend({template:`&lt;div&gt;&lt;/div&gt;`})</code></li><li>注册组件<br><code>Vue.component(注册组件的标签名,组件构造器)</code></li><li>使用组件<br><code>&lt;组件标签名&gt;&lt;/组件标签名&gt;</code></li></ul></li><li><p>全局组件和局部组件</p><ul><li>全局组件可以在多个Vue的实例下使用<br><code>Vue.component(注册组件的标签名,组件构造器)</code></li><li>在Vue实例中注册即为局部组件<pre><code>const app = new Vue({  el: &#39;#app&#39;,  components: {    // cpn为使用组件时的标签名    cpn: 组件构造器(cpnC)  }})</code></pre></li></ul></li><li><p>组件注册的语法糖</p><ul><li>全局组件<pre><code>Vue.component(&#39;cpn&#39;, {  template: `    &lt;div&gt;      &lt;h2&gt;&lt;/h2&gt;    &lt;/div&gt;  `})</code></pre></li><li>局部组件<pre><code>const app = new Vue({  el: &#39;app&#39;,  components: {    &#39;cpn&#39;: {      template: {        &lt;div&gt;           &lt;h2&gt;&lt;/h2&gt;        &lt;/div&gt;      }    }  }})</code></pre></li></ul></li><li><p>组件模板分离</p><ul><li><p>利用<code>&lt;script&gt;</code></p><pre><code>&lt;script type=&quot;text/x-template&quot; id=&quot;cpn&quot;&gt;  &lt;div&gt;    &lt;h2&gt;&lt;/h2&gt;  &lt;/div&gt;&lt;/script&gt;  Vue.component(&#39;cpn&#39;,{  template: &#39;#cpn&#39;})</code></pre></li><li><p>利用<code>&lt;template&gt;</code></p><pre><code>&lt;template id=&quot;cpn&quot;&gt;  &lt;div&gt;    &lt;h2&gt;模板分离&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;Vue.component(&#39;cpn&#39;,{  template: &#39;#cpn&#39;})</code></pre></li></ul></li></ul><hr><h2 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h2><ul><li>组件对象有一个<strong>data</strong>属性(也有<strong>methods</strong>属性)</li><li><strong>data</strong>属性必须是一个函数</li><li>函数的返回值是一个对象，对象中存储</li><li><strong>data</strong>中为什么必须是个函数？</li></ul><hr><h2 id="父子组件的通信"><a href="#父子组件的通信" class="headerlink" title="父子组件的通信"></a>父子组件的通信</h2><ul><li><p>通过<code>props</code>向子组件传递数据</p><ul><li><p>方式一：字符串数组，数组中的字符串就是传递时的名称</p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;cpn :cbooks=&quot;books&quot;&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt;  &lt;ul&gt;    &lt;li v-for=&quot;item in cbooks&quot;&gt;{{item}}&lt;/li&gt;  &lt;/ul&gt;&lt;/template&gt;const cpn = {  template: &#39;#cpn&#39;,  props: [&#39;cbooks&#39;]};const app = new Vue({  el: &#39;#app&#39;,  data: {    books: [&#39;三国演义&#39;,&#39;西游记&#39;,&#39;红楼梦&#39;,&#39;水浒传&#39;]  },  components: {    cpn  }});</code></pre></li><li><p>方式二：对象，可设置传递的类型，也可设置默认值 </p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;cpn :cbooks=&quot;books&quot; :cmessage=&quot;message&quot;&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt;  &lt;ul&gt;    &lt;li v-for=&quot;item in cbooks&quot;&gt;{{item}}&lt;/li&gt;  &lt;/ul&gt;  &lt;h2&gt;{{cmessage}}&lt;/h2&gt;&lt;/template&gt;const cpn = {  template: &#39;#cpn&#39;,  props: {    // cbooks: Array    cbooks: {      type: Array,  // 为数组或对象时，默认值必须是一个函数      difault() {        return []      }    }    cmessage: {      type: String,      default: &#39;hi&#39;,      required: true, // 必须传值    }  }};const app = new Vue({  el: &#39;#app&#39;,  data: {    books: [&#39;三国演义&#39;,&#39;西游记&#39;,&#39;红楼梦&#39;,&#39;水浒传&#39;],    message: &#39;hello&#39;  },  components: {    cpn  }});</code></pre></li></ul></li><li><p>通过事件(自定义事件 emit发射出去)向父组件发送消息</p><pre><code>&lt;!--父组件--&gt;&lt;div id=&quot;app&quot;&gt;  &lt;cpn @item-click=&quot;cpnClick&quot;&gt;&lt;/cpn&gt;&lt;/div&gt;&lt;!--子组件--&gt;&lt;template id=&quot;cpn&quot;&gt;  &lt;div&gt;    &lt;button v-for=&quot;item in categories&quot; @click=&quot;btnClick(item)&quot;&gt;{{item.name}}&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;const cpn = {  template: &#39;#cpn&#39;,  data() {    return {      categories: [        {id: &#39;aaa&#39;, name: &#39;热门&#39;},        {id: &#39;bbb&#39;, name: &#39;手机&#39;},        {id: &#39;ccc&#39;, name: &#39;家电&#39;},        {id: &#39;ddd&#39;, name: &#39;电脑&#39;}      ]    }  },  methods: {    btnClick(item) {      this.$emit(&#39;item-click&#39;, item)    }  }}const app = new Vue({  el: &#39;#app&#39;,  data: {  },  components: {    cpn  },  methods: {    cpnClick(item) {      console.log(item.name)    }  }})&lt;/script&gt;</code></pre></li></ul><hr><h2 id="父子组件的访问"><a href="#父子组件的访问" class="headerlink" title="父子组件的访问"></a>父子组件的访问</h2><ul><li>父组件访问子组件<ul><li>使用$children(是个数组类型 不建议使用)</li><li>使用$refs(是个对象类型 默人为空对象 给模板加入ref属性)</li></ul></li><li>子组件访问父组件<ul><li>使用$parent</li></ul></li><li>访问根组件<ul><li>使用$root</li></ul></li></ul><hr><h2 id="插槽-抽取共性，保留不同"><a href="#插槽-抽取共性，保留不同" class="headerlink" title="插槽(抽取共性，保留不同)"></a>插槽(抽取共性，保留不同)</h2><ul><li><p><code>slot</code>的使用</p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;cpn&gt;    &lt;div&gt;      &lt;i&gt;i标签&lt;/i&gt;      &lt;span&gt;span标签&lt;/span&gt;    &lt;/div&gt;  &lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt;  &lt;div&gt;    &lt;h2&gt;子组件&lt;/h2&gt;    &lt;!--默认值--&gt;    &lt;slot&gt;&lt;button&gt;按钮&lt;/button&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre></li><li><p>具名插槽</p><ul><li><code>slot</code>使用<pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;cpn&gt;    &lt;button slot=&quot;left&quot;&gt;返回&lt;/button&gt;    &lt;span slot=&quot;center&quot;&gt;替换中间&lt;/span&gt;  &lt;/cpn&gt;&lt;/div&gt;&lt;template id=&quot;cpn&quot;&gt;  &lt;div&gt;    &lt;slot name=&quot;left&quot;&gt;&lt;span&gt;左边&lt;/span&gt;&lt;/slot&gt;    &lt;slot name=&quot;center&quot;&gt;&lt;span&gt;中间&lt;/span&gt;&lt;/slot&gt;    &lt;slot name=&quot;right&quot;&gt;&lt;span&gt;右边&lt;/span&gt;&lt;/slot&gt;  &lt;/div&gt;&lt;/template&gt;</code></pre></li><li><code>slot</code>官方已经弃用，改为<code>v-slot</code>，并且<code>v-slot</code>只能添加在<code>&lt;template&gt;</code>上</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue组件化思想&quot;&gt;&lt;a href=&quot;#Vue组件化思想&quot; class=&quot;headerlink&quot; title=&quot;Vue组件化思想&quot;&gt;&lt;/a&gt;Vue组件化思想&lt;/h2&gt;&lt;div style=&quot;text-align: center&quot;&gt;

&lt;p&gt;&lt;img src=&quot;/i
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue组件" scheme="http://yoursite.com/tags/Vue%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的Virtual DOM</title>
    <link href="http://yoursite.com/2020/06/11/vue-virtual-dom/"/>
    <id>http://yoursite.com/2020/06/11/vue-virtual-dom/</id>
    <published>2020-06-11T11:45:17.000Z</published>
    <updated>2020-06-11T11:46:34.760Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Virtual DOM" scheme="http://yoursite.com/tags/Virtual-DOM/"/>
    
  </entry>
  
  <entry>
    <title>ES6知识</title>
    <link href="http://yoursite.com/2020/06/08/es6/"/>
    <id>http://yoursite.com/2020/06/08/es6/</id>
    <published>2020-06-08T07:20:32.000Z</published>
    <updated>2020-06-22T11:00:42.685Z</updated>
    
    <content type="html"><![CDATA[<h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;箭头函数&quot;&gt;&lt;a href=&quot;#箭头函数&quot; class=&quot;headerlink&quot; title=&quot;箭头函数&quot;&gt;&lt;/a&gt;箭头函数&lt;/h2&gt;
      
    
    </summary>
    
    
      <category term="-ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="-ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的MVVM</title>
    <link href="http://yoursite.com/2020/06/06/vue-mvvm/"/>
    <id>http://yoursite.com/2020/06/06/vue-mvvm/</id>
    <published>2020-06-06T08:25:58.000Z</published>
    <updated>2020-06-06T09:26:59.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVVM的理解"><a href="#MVVM的理解" class="headerlink" title="MVVM的理解"></a>MVVM的理解</h2><pre><code>MVVM拆开来即为Model-View-ViewModel，由View ViewModel Model三部分组成</code></pre><div style="text-align: center"><p><img src="/images/vue_mvvm.png" alt="Vue的数据驱动视图"></p></div><ul><li><strong>View层</strong><ul><li>视图层</li><li>前端开发中，通常为DOM</li><li>主要用与展示信息</li></ul></li><li><strong>Model层</strong><ul><li>数据层</li><li>可能是固定的数据，更多的是来自于网络请求</li></ul></li><li><strong>ViewModel层</strong><ul><li>视图模型层</li><li>是View和Model沟通的桥梁</li><li>一方面实现了数据绑定(<strong>Data Bindings</strong>),即将<strong>Model</strong>层数据的改变实时反应到<strong>View</strong>层中</li><li>另一方面实现了<strong>DOM</strong>监听(<strong>DOM Listener</strong>)，即监听<strong>DOM</strong>事件的发生，并改变对应的数据</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;MVVM的理解&quot;&gt;&lt;a href=&quot;#MVVM的理解&quot; class=&quot;headerlink&quot; title=&quot;MVVM的理解&quot;&gt;&lt;/a&gt;MVVM的理解&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MVVM拆开来即为Model-View-ViewModel，由View ViewMo
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Vue中的MVVM" scheme="http://yoursite.com/tags/Vue%E4%B8%AD%E7%9A%84MVVM/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="http://yoursite.com/2020/06/05/vue/"/>
    <id>http://yoursite.com/2020/06/05/vue/</id>
    <published>2020-06-05T12:20:02.000Z</published>
    <updated>2020-06-12T09:26:21.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue安装的三种方式"><a href="#Vue安装的三种方式" class="headerlink" title="Vue安装的三种方式"></a>Vue安装的三种方式</h2><ol><li><p><strong>CDN引入</strong></p><ul><li><strong>开发环境版本，包含了有帮助的命令行警告</strong><br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li><li><strong>生产环境版本，优化了尺寸和速度</strong><br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</code>  </li></ul></li><li><p><strong>官方下载引入</strong>  </p><ul><li>直接引入<code>&lt;script&gt;</code>标签</li></ul></li><li><p><strong>NPM安装</strong>  </p><ul><li><code>npm install vue</code></li></ul></li></ol><hr><h2 id="创建Vue实例传入的options"><a href="#创建Vue实例传入的options" class="headerlink" title="创建Vue实例传入的options"></a>创建Vue实例传入的options</h2><ul><li><strong>el</strong><ul><li>类型：string | HTMLElement</li><li>作用：决定之后Vue实例会管理哪一个DOM</li></ul></li><li><strong>data</strong><ul><li>类型：Object | Function</li><li>作用：Vue实例对应的数据对象</li></ul></li><li><strong>methods</strong><ul><li>类型：{ [key: string]: Function }</li><li>作用：定义属于Vue的一些方法，可以在其他地方调用，也可以在指令中使用</li></ul></li></ul><hr><h2 id="插值操作"><a href="#插值操作" class="headerlink" title="插值操作"></a>插值操作</h2><ol><li><strong>Mustache语法</strong>  <pre><code>&lt;div id=&quot;app&quot;&gt;   &lt;h2&gt;{{hello}}&lt;/h2&gt;   &lt;h2&gt;{{hello + ' ' + world}}&lt;/h2&gt;   &lt;h2&gt;{{hello}} {{world}}&lt;/h2&gt;   &lt;h2&gt;{{count * 2}}&lt;/h2&gt;&lt;/div&gt;&lt;script&gt;   const app = new Vue({      el: &#39;#app&#39;,      data: {         hello: &#39;hello&#39;,         world: &#39;world&#39;,         count: 100      }   })&lt;/script&gt;</code></pre></li><li><strong>v-once指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>该指令表示元素和组件只渲染一次，不会随着数据的该笔而改变</li></ul></li><li><strong>v-html指令</strong><ul><li>该指令后面往往跟上一个string类型</li><li>会将string类型的html解析并渲染</li></ul></li><li><strong>v-text指令</strong><ul><li>该指令与<strong>Mustache</strong>语法比较相似，都是将数据显示在界面，但不够灵活</li><li>该指令接受一个string类型</li></ul></li><li><strong>v-pre指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>该指令跳过解析，显示原本的内容</li></ul></li><li><strong>v-cloak指令</strong><ul><li>该指令后不需要跟任何表达式</li><li>斗篷</li></ul></li></ol><hr><h2 id="v-bind指令"><a href="#v-bind指令" class="headerlink" title="v-bind指令"></a>v-bind指令</h2><ul><li>该指令可以动态绑定属性<ol><li>使用方法  <pre><code>&lt;div id=&quot;app&quot;&gt;&lt;img v-bind:src=&quot;imgURL&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</code></pre></li><li>语法糖  <pre><code>&lt;div id=&quot;app&quot;&gt;&lt;img :src=&quot;imgURL&quot; alt=&quot;&quot;&gt;&lt;/div&gt;</code></pre></li></ol></li><li>动态绑定class<ol><li>使用方法  <pre><code>&lt;style&gt;.active {  color: red;}&lt;/style&gt;&lt;div id=&quot;app&quot;&gt;&lt;h2 :class=&quot;active&quot;&gt;hello&lt;/h2&gt;&lt;h2 :class=&quot;{类名1:boolean,类名2:boolean}&quot;&gt;hello&lt;/h2&gt;&lt;h2 :class=&quot;{key(css属性名):value(css属性值)}&quot;&gt;hello&lt;/h2&gt;&lt;/div&gt;</code></pre></li></ol></li></ul><hr><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ol><li><p>使用方法 </p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;h2&gt;{{fullStr}}&lt;/h2&gt;&lt;/div&gt;const app = new Vue({  el: &#39;#app&#39;,  data: {    firstStr: &#39;hello&#39;,    lastStr: &#39;world&#39;  },  computed: {    fullStr() {     return this.firstStr + &#39; &#39; + this.lastStr;    }  }})</code></pre></li><li><p>setter和getter方法  </p><pre><code>&lt;div id=&quot;app&quot;&gt;  &lt;h2&gt;{{fullStr}}&lt;/h2&gt;&lt;/div&gt;const app = new Vue({  el: &#39;#app&#39;,  data: {    firstStr: &#39;hello&#39;,    lastStr: &#39;world&#39;  },  computed: {    fullStr: function() {      set: function(value) { //大多数情况不写      const str = value.split(&#39; &#39;);      this.firstStr = str[0];      this.lastStr = str[1];      },      get: function() {        return this.firstStr + &#39; &#39; + this.lastStr;      }    }  }})</code></pre></li><li><p><strong>computed</strong>和<strong>methods</strong>的对比</p><ul><li>多次使用时<strong>computed</strong>比<strong>methods</strong>性能高</li><li><strong>Vue</strong>内部对<strong>computed</strong>做了缓存，多次使用只调用一次，只有内容发生改变时，才会重新调用、缓存；而<strong>methods</strong>是使用几次调用几次</li></ul></li></ol><hr><h2 id="v-on事件监听"><a href="#v-on事件监听" class="headerlink" title="v-on事件监听"></a>v-on事件监听</h2><ul><li>绑定事件监听器</li><li>使用  <pre><code>&lt;button v-on:click=&quot;&quot;&gt;&lt;/button&gt;</code></pre></li><li>语法糖  <pre><code>&lt;button @click=&quot;&quot;&gt;&lt;/button&gt;</code></pre></li><li>v-on参数<ol><li>若方法不需要额外参数，方法后的()可以不添加</li><li>写方法时省略了()，但方法本身是需要一个参数的Vue会默认将浏览器生产的event对象作为参数传入</li><li>方法定义时，需要event对象，也需要其他参数<pre><code>&lt;button @click=&quot;btnClick(param,$event)&quot;&gt;&lt;/button&gt;</code></pre></li></ol></li><li>v-on修饰符<ol><li>阻止冒泡<strong>stop</strong>    <pre><code> &lt;div @click=&quot;divClick&quot;&gt;   &lt;button @click.stop=&quot;btnClick&quot;&gt;按钮&lt;/button&gt; &lt;/div&gt;</code></pre></li><li>阻止默认行为<strong>prevent</strong>    <pre><code> &lt;form action=&quot;baidu&quot;&gt;   &lt;input type=&quot;submit&quot; value=&quot;提交&quot; @click.prevent=&quot;submitClick&quot;&gt; &lt;/form&gt;</code></pre></li><li>监听某个键盘键帽的点击(例如enter键)<pre><code> &lt;input type=&quot;text&quot; @keyup.enter=&quot;keyClick&quot;&gt;</code></pre></li><li>只触发一次回调<strong>once</strong><pre><code> &lt;button @click.once=&quot;buttonClick&quot;&gt;按钮&lt;/button&gt;</code></pre></li></ol></li></ul><hr><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><ul><li>v-if的使用(接收一个Boolean值)<pre><code>&lt;h2 v-if=&quot;true&quot;&gt;hello world&lt;/h2&gt;</code></pre></li><li>v-else的使用(v-if接收的是false是起作用)<pre><code>&lt;h2 v-if=&quot;isShow&quot;&gt;isShow为true时显示&lt;/h2&gt;  &lt;h2 v-else&gt;isShow为false时显示&lt;/h2&gt;</code></pre></li><li>v-else-if的使用(不建议)<pre><code>&lt;p v-if=&quot;score&gt;=90&quot;&gt;优秀&lt;/p&gt;&lt;p v-else-if=&quot;score&gt;=80&quot;&gt;良好&lt;/p&gt;&lt;p v-else-if=&quot;score&gt;=60&quot;&gt;合格&lt;/p&gt;&lt;p v-else&gt;不及格&lt;/p&gt;</code></pre></li><li>这里补充一下Vue中的Virtual DOM，也就是所谓的虚拟DOM<ul><li><strong>Virtual DOM</strong>其实就是一棵以JavaScript对象(VNode 节点)作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。简单来说，可以把Virtual DOM 理解为一个简单的JS对象，并且最少包含标签名(tag)、属性(attrs)和子元素对象(children)三个属性。不同的框架对这三个属性的命名会有点差别</li><li><strong>Virtual DOM</strong>在Vue中做了什么<ol><li>供与真实DOM节点所对应的虚拟节点<strong>Vnode</strong></li><li>将虚拟节点Vnode和旧虚拟节点oldVnode进行对比，然后更新视图</li></ol></li></ul></li><li>v-show的使用<pre><code>&lt;h2 v-if=&quot;isShow&quot;&gt;isShow为true时显示&lt;/h2&gt;&lt;h2 v-show=&quot;isShow&quot;&gt;isShow为true时显示&lt;/h2&gt;</code></pre><ul><li>v-if与v-show控制元素显示的区别<ol><li>v-if，条件为false时，元素不会在DOM中存在；条件为true时，会重新创建元素</li><li>v-show，条件为false时，只是增加了行内样式：<code>display:none;</code>元素仍在DOM中存在</li><li>切换评率较高时使用v-show，只有一次使用v-if</li></ol></li></ul></li></ul><hr><h2 id="循环遍历"><a href="#循环遍历" class="headerlink" title="循环遍历"></a>循环遍历</h2><ul><li>v-for遍历数组<pre><code>&lt;ul&gt;  &lt;li v-for=&quot;(item,index) in books&quot;&gt;{{index+1}}-{{item}}&lt;/li&gt;&lt;/ul&gt;</code></pre></li><li>v-for遍历对象<pre><code>&lt;ul&gt;  &lt;li v-for=&quot;(value,key,index) in info&quot;&gt;{{key}}-{{value}}-{{index}}&lt;/li&gt;&lt;/ul&gt;</code></pre></li><li>数组中哪些方法是响应式的？<ol><li>push():在数组末尾添加元素</li><li>pop():删除数组最后一个元素</li><li>shift():删除数组第一个元素</li><li>unshift():在数组最前面添加元素</li><li>splice():可删除/替换/插入元素</li><li>sort():排序</li><li>reverse():反转</li><li>Vue.set(要修改的对象,修改的索引值,修改后的值)</li><li>通过索引值修改数组中的元素不可以做到响应式</li></ol></li></ul><hr><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>本质包含两个操作<ul><li>v-bind绑定属性</li><li>v-on给当前元素绑定事件</li></ul></li><li>经常与<code>input</code> <code>textarea</code> <code>select</code>一块使用</li><li>值绑定<ul><li>标签中的值不写死，动态绑定</li></ul></li><li>v-model的修饰符<ul><li>lazy修饰符，不再实时绑定，当失去焦点或点击ENTER键时绑定  <pre><code>&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</code></pre></li><li>number修饰符，<code>input</code>限制只能输入数字时，v-model绑定的仍是string类型，加上number修饰符就是number类型  <pre><code>&lt;input type=&quot;number&quot; v-model.number=&quot;message&quot;&gt;</code></pre></li><li>trim修饰符，去除两端的空格<pre><code>&lt;input type=&quot;text&quot; v-model.trim=&quot;message&quot;&gt;</code></pre></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue安装的三种方式&quot;&gt;&lt;a href=&quot;#Vue安装的三种方式&quot; class=&quot;headerlink&quot; title=&quot;Vue安装的三种方式&quot;&gt;&lt;/a&gt;Vue安装的三种方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;CDN引入&lt;/strong&gt;&lt;/p&gt;
&lt;u
      
    
    </summary>
    
    
      <category term="-Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="-Vue基础" scheme="http://yoursite.com/tags/Vue%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="http://yoursite.com/2020/06/04/JavaScript/"/>
    <id>http://yoursite.com/2020/06/04/JavaScript/</id>
    <published>2020-06-04T12:25:02.000Z</published>
    <updated>2020-06-19T10:01:40.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul><li><code>indexOf()</code>方法返回字符串中指定文本首次出现的索引（位置）</li><li><code>lastIndexOf()</code>方法返回指定文本在字符串中最后一次出现的索引（位置）  </li></ul><p><strong>注意：如未找到，indexOf()和lastIndexOf()均返回-1</strong></p><ul><li><code>search()</code>方法搜索特定值的字符串，并返回匹配的位置</li><li><code>slice()</code>方法提取部分字符串，可接受负索引<ul><li>参数一：起始索引</li><li>参数二：终止索引，省略，则提取起始索引往后的内容</li></ul></li><li><code>substring()</code>方法类似于<code>slice()</code>，不可接受负索引</li><li><code>substr()</code>方法类似于<code>slice()</code>，不同于第二个参数<ul><li>参数一：起始位置</li><li>参数二：提取内容的长度，省略，则提取起始索引往后的内容</li></ul></li><li><code>replace()</code>方法用于替换字符串中的值<ul><li>参数一：要替换的值</li><li>参数二：用什么替换</li></ul></li><li><code>toUpperCase()</code>方法把字符串转换为大写</li><li><code>toLowerCase()</code>方法把字符串转换为小写</li><li><code>concat()</code>方法连接两个或多个字符串</li><li><code>trim()</code>方法去除字符串两端的空白</li><li><code>charAt()</code>方法返回字符串中指定下标的字符串<ul><li>参数：索引（位置）</li></ul></li><li><code>charCodeAt()</code>方法返回字符串中指定索引的字符的unicode编码</li><li><code>split()</code>方法把字符串转换为数组<ul><li>参数：分隔符，可省略</li></ul></li></ul><hr><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li><strong>Array.prototype.map</strong><ul><li><code>map()</code>函数会创建一个新的数组，数组中的元素是传进来的回调函数调用原来数组相同位置的元素的返回值</li><li>传给<code>map()</code>的回调函数callback接收三个参数：<code>element</code> <code>index</code> <code>array</code></li></ul></li><li><strong>Array.prototype.filter</strong><ul><li><code>filter()</code>函数创建一个新的数组，数组里面存储原数组里面可以通过传进来的callback测试的元素</li><li>传给<code>filter()</code>的回调函数接收三个参数：<code>element</code> <code>index</code> <code>array</code></li></ul></li><li><strong>Array.prototype.reduce</strong><ul><li><code>reduce</code>方法用被调用数组的元素依次作为参数调用传进来的callback然后产生一个返回值</li><li><code>reduce</code>函数接收两个参数：一个是回调函数callback，一个是可选参数作为preValue的初始值</li><li>callback函数接收4个参数：<code>preValue</code> <code>currentValue</code> <code>currentIndex</code> <code>sourceArray</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符串方法&quot;&gt;&lt;a href=&quot;#字符串方法&quot; class=&quot;headerlink&quot; title=&quot;字符串方法&quot;&gt;&lt;/a&gt;字符串方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;indexOf()&lt;/code&gt;方法返回字符串中指定文本首次出现的索引（位置）&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="-JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="-JavaScript基础语法" scheme="http://yoursite.com/tags/JavaScript%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript算法笔记</title>
    <link href="http://yoursite.com/2020/06/04/algorithm-notes/"/>
    <id>http://yoursite.com/2020/06/04/algorithm-notes/</id>
    <published>2020-06-04T12:25:02.000Z</published>
    <updated>2020-06-19T14:06:29.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h3><ol><li><ul><li>给出一个字符串”adadfdfseffqdjhuserfefsefseetsdg”</li><li>要求：找出里边的字符串qdjhu</li><li>题解：<pre><code>   let string = &#39;adadfdfseffqdjhuserfefsefseetsdg&#39;   let search = &#39;qdjhu&#39;   // 找到search在string中开始的位置   let indexStart = string.indexOf(search)   let indexEnd = indexStart + search.length   let result  = string.substring(indexStart,indexEnd)   console.log(result)</code></pre></li></ul></li><li><ul><li>字符串转驼峰</li><li>例如：border-bottom-color -&gt; borderBottomColor</li><li>题解：<pre><code>   function strToHump(val) {   let arr = val.split(&#39;-&#39;)   return arr.reduce(function (pre,current,index) {       return pre + current.charAt(0).toUpperCase() + current.slice(1)   })   }</code></pre></li></ul></li><li><ul><li>找出字符串中出行次数最多的字符和个数</li><li>例如：abbcccddddd -&gt; 字符最多的是d，出现了5次</li><li>题解：<pre><code>   let str = &#39;abbcccddddd&#39;   let obj = str.split(&#39;&#39;).reduce(function (pre,cur) {   pre[cur] ? pre[cur]++ : pre[cur] = 1   return pre   }, {})   let num = 0   let result = &#39;&#39;   for(key in obj) {   if (obj[key] &gt; num) {       num = obj[key]       result = key   }   }</code></pre></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符串相关&quot;&gt;&lt;a href=&quot;#字符串相关&quot; class=&quot;headerlink&quot; title=&quot;字符串相关&quot;&gt;&lt;/a&gt;字符串相关&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;给出一个字符串”adadfdfseffqdjhuserfefsefseetsdg”&lt;/
      
    
    </summary>
    
    
      <category term="-JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="-JavaScript算法" scheme="http://yoursite.com/tags/JavaScript%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
